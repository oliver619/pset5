// Implements a dictionary's functionality

#include <stdbool.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <stdio.h>

#include "dictionary.h"

// Represents a node in a hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// Number of buckets in hash table
const unsigned int N = 26;

// Hash table
node *table[N];

// Returns true if word is in dictionary else false
bool check(const char *word)
{
    for (node *cursor = table[hash(word)]; cursor -> next != NULL; cursor = cursor->next)
    {
        if(strcasecmp(cursor->word, word) == 0)
        {
            return true;
        }
    }
    return false;
}

// Hashes word to a number
unsigned int hash(const char *word)
{
    int n = (int) tolower(word[0]) - 97;
    return n;
}

// Loads dictionary into memory, returning true if successful else false
int counter = 0;
bool load(const char *dictionary)
{
    FILE *dict = fopen(dictionary, "r");
    if (dict == NULL)
    {
        return 1;
    }
    char *dword = malloc(LENGTH);
    if (dword == NULL)
    {
        return false;
    }
    while (fscanf(dict, "%s", dword) != EOF)
    {
        node *n = malloc(sizeof(node));
        if (n == NULL)
        {
            return false;
        }

        strcpy(n->word, dword);
        counter++;
        n->next = table[hash(dword)];
        table[hash(dword)] = n;

    }  
    fclose(dict);
    free(dword);
    return true;
}

// Returns number of words in dictionary if loaded else 0 if not yet loaded
unsigned int size(void)
{
    return counter;
}

// Unloads dictionary from memory, returning true if successful else false
bool unload(void)
{
    node *cursor;
    node *temp;
    for(int i = 0; i < N; i++)
    {
        for(cursor = table[i]; cursor != NULL; cursor = cursor->next)
        {
            cursor = cursor->next;
            break;
            for(temp = table[i]; temp != NULL; temp = temp -> next)
            {
                free(temp);
                break;
            }
        }
        free(cursor);
    }
    // TODO
    return true;
}
